# This is a basic workflow to help you get started with Actions
name: build tmdgpt docker image
# Controls when the action will run.
on:
  push:
    branches:
      - main
  # Allows you to run this workflow manually from the Actions tab
  # 可以手动触发
  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        default: "warning"
      tags:
        description: "Test scenario tags"
  schedule:
        # Runs everyday at 2:00 AM
        - cron: "0 2 * * *"
# 定义环境变量, 后面会使用
# 定义 APP_NAME 用于 docker build-args
# 定义 DOCKERHUB_REPO 标记 docker hub repo 名称
env:
  APP_NAME: tmd_gpt
  DOCKERHUB_REPO: cxgup/tmd_gpt

jobs:
  buildx:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get current date
        id: date
        run: echo "version_today=$(date +'%y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Update ChatGPT-Next-Web
        run: |
          git submodule update --init --recursive
          git submodule update --remote --merge docker/3rd/ChatGPT-Next-Web
          cd ./docker/3rd/ChatGPT-Next-Web/public && rm -rf prompts.json && wget https://raw.githubusercontent.com/leegical/CrossWall/main/docker/prompts.json
          cd ../app/masks && rm -rf cn.ts && wget https://raw.githubusercontent.com/leegical/CrossWall/main/docker/cn.ts

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./docker/3rd/ChatGPT-Next-Web
          file: ./docker/3rd/ChatGPT-Next-Web/Dockerfile
          # 所需要的体系结构，可以在 Available platforms 步骤中获取所有的可用架构
          platforms: linux/amd64
          # 是否 docker push
          push: true
          # docker build arg, 注入 APP_NAME/APP_VERSION
          build-args: |
            APP_NAME=${{ env.APP_NAME }}
            APP_VERSION=${{ steps.date.outputs.version_today }}
          # 给清单打上多个标签
          tags: |
            ${{ env.DOCKERHUB_REPO }}:${{ steps.date.outputs.version_today }}
            ${{ env.DOCKERHUB_REPO }}:latest
